{
	"collections": [
		{
			"name": "C programming",
			"snippets": [
				{
					"title": "30. Write down the differences between call by value and call by reference.-Aryan Thapaliya",
					"code": "This question does not require code to be written. View the output!",
					"outputImage": "./assets/filehandling_ii/answer.png",
					"fileImage": "./assets/filehandling_ii/answer.png"
				},
				{
					"title": "Write a program to store information of n number of students having fields id, name, address, age in a file named student.dat file and finally read from a file and display the records. (Darshan Subedi",
					"code": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Student {\n    int id;\n    char name[50];\n    char address[100];\n    int age;\n};\n\nint main() {\n    int n;\n    printf(\"Enter the number of students: \");\n    scanf(\"%d\", &n);\n    \n    FILE *file = fopen(\"student.dat\", \"wb\");\n    if (file == NULL) {\n        printf(\"Error opening file!\n\");\n        exit(1);\n    }\n    \n    struct Student s;\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter details for student %d:\n\", i + 1);\n        printf(\"ID: \");\n        scanf(\"%d\", &s.id);\n        printf(\"Name: \");\n        scanf(\" %[^\"]s\", s.name);\n        printf(\"Address: \");\n        scanf(\" %[^\"]s\", s.address);\n        printf(\"Age: \");\n        scanf(\"%d\", &s.age);\n        fwrite(&s, sizeof(struct Student), 1, file);\n    }\n    fclose(file);\n    \n    file = fopen(\"student.dat\", \"rb\");\n    if (file == NULL) {\n        printf(\"Error opening file!\n\");\n        exit(1);\n    }\n    \n    printf(\"\nStudent Records:\n\");\n    while (fread(&s, sizeof(struct Student), 1, file)) {\n        printf(\"ID: %d\n\", s.id);\n        printf(\"Name: %s\n\", s.name);\n        printf(\"Address: %s\n\", s.address);\n        printf(\"Age: %d\n\", s.age);\n        printf(\"-----------------------------\n\");\n    }\n    fclose(file);\n    \n    return 0;\n}",
					"outputImage": "./assets/cprogramming/structresult.PNG",
					"fileImage": "./assets/cprogramming/structfile.PNG"
				},
				{
					"title": "Write a C program to sort the elements of an array in descending order. (Binam Adhikari)",
					"code": "#include <stdio.h>\n\nvoid sortDescending(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] < arr[j]) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {64, 34, 25, 12, 22, 11, 90};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    sortDescending(arr, n);\n\n    printf(\"Sorted array in descending order: \n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\n\");\n\n    return 0;\n}",
					"outputImage": "./assets/53.png",
					"fileImage": ""
				},
				{
					"title": "What is file handling? Explain the types of file handling mode in brief. Write a C program to write a character and display it using fgetc () and fputc () functions. [Biraj Bhusal (741)]",
					"code": "File handling is the process of creating, opening, reading, writing, and closing files in a program. It allows data to be stored permanently in secondary storage, making it possible to save and retrieve information across different executions of a program.\nFile handling modes define how a file is accessed in a program. There are 12 different modes, each serving a specific purpose for reading, writing, or appending data. Below is a brief explanation of each mode:\n\n1. \"r\" (Read Mode): This mode is used to open an existing file for reading only. If the file does not exist, the function returns NULL. The file pointer is positioned at the beginning of the file, and attempting to write to the file in this mode will result in an error.\n\n2. \"w\" (Write Mode): This mode opens a file for writing, creating a new file if it does not exist. If the file already exists, its content is erased, and new data is written from the beginning. Since it only supports writing, attempting to read from the file in this mode will lead to an error.\n\n3. \"a\" (Append Mode): This mode opens a file for appending data at the end. If the file does not exist, it creates a new one. Unlike \"w\", it does not erase existing content but only allows adding new data at the end.\n\n4. \"rb\" (Read Binary Mode): Similar to \"r\", but used for reading binary files like images, audio, and video. The file must exist; otherwise, the function returns NULL. It reads data in binary form, preserving its original structure.\n\n5. \"wb\" (Write Binary Mode): This mode is used to create a new binary file or overwrite an existing one. It writes data in binary format instead of text. If the file already exists, all previous content is erased.\n\n6. \"ab\" (Append Binary Mode): This mode opens a binary file to add new data at the end. If the file does not exist, a new one is created. Unlike \"wb\", it does not delete previous content but appends new binary data.\n\n7. \"r+\" (Read and Write Mode): This mode allows both reading and writing to a file. The file must already exist; otherwise, it returns an error. The file pointer is positioned at the beginning, allowing updates to existing content.\n\n8. \"w+\" (Write and Read Mode): This mode creates a new file or overwrites an existing one, allowing both reading and writing. Since the existing content is deleted, it is useful when fresh data needs to be stored. The file pointer is positioned at the beginning.\n\n9. \"a+\" (Append and Read Mode): This mode allows both reading and appending to a file. If the file does not exist, it creates a new one. Reading starts from the beginning, but writing always happens at the end without deleting previous content.\n\n10. \"rb+\" (Read and Write Binary Mode): This mode is similar to \"r+\", but for binary files. It allows reading and modifying existing binary files without deleting their content. The file must already exist, or an error is returned.\n\n11. \"wb+\" (Write and Read Binary Mode): This mode creates a new binary file or overwrites an existing one, allowing both reading and writing. Any existing content is erased, making it useful for fresh binary data storage. The file pointer starts at the beginning.\n\n12. \"ab+\" (Append and Read Binary Mode): This mode allows reading and appending to a binary file. If the file exists, new data is added at the end, while reading is possible from the beginning. If the file does not exist, a new one is created.\n\nThese file handling modes help manage data efficiently, whether dealing with text or binary files, ensuring proper access according to the required operation.\n\n Code:\n #include <stdio.h>\nint main() {\nFILE *fp;\nchar c;\nfp = fopen(\"D:\\\biraj.txt\", \"w\");\nif (fp == NULL) {\nprintf(\"Could not open file\n\");\nreturn 1;\n}\nc = 'A';\nfputc(c, fp);\nfclose(fp);\nfp = fopen(\"D:\\\biraj.txt\", \"r\");\nif (fp == NULL) {\nprintf(\"Could not open file\n\");\nreturn 1;\n}\nc = fgetc(fp);\nprintf(\"The character is: %c\n\", c);\nfclose(fp);\nprintf(\"\n\nDone by: Biraj Bhusal\");\nreturn 0;\n}",
					"outputImage": "./assets/filehandling_ii/41_outputimage.png",
					"fileImage": "./assets/filehandling_ii/41_fileimage.png"
				},
				{
					"title": "What are data-types in c? Write the range of each data-types in c and how much memory does it consume? -Aadarsha Bhatta 702",
					"code": "This question does not require code to be written. View the output!",
					"outputImage": "./assets/filehandling_ii/Q2.png",
					"fileImage": "./assets/filehandling_ii/Q2.png"
				},
				{
					"title": "How do you construct an increment or decrement statement in C? What is variable initialization and why is it important? -Aadarsha Bhatta 702",
					"code": "This question does not require code to be written. View the output!",
					"outputImage": "./assets/filehandling_ii/Q58.png",
					"fileImage": "./assets/filehandling_ii/Q58.png"
				},
				{
					"title": "Write a C program to append content to an existing file. Dikshyanta Karki (749)",
					"code": "#include <stdio.h>\n\nint main() {\n    FILE *file;\n    char content[] = \"This is the appended content.\";\n    file = fopen(\"existing.txt\", \"a\");\n    if (file == NULL) {\n        printf(\"Error opening file for appending.\");\n        return 1;\n    }\n    fprintf(file, \"%s\", content);\n    fclose(file);\n    return 0;\n}",
					"outputImage": "./assets/filehandling_ii/49_output.png",
					"fileImage": "./assets/filehandling_ii/49_output2.png"
				},
				{
					"title": "Write a C program to calculate the sum of n natural numbers. Ambu shree",
					"code": "//Write a program using user-defined function to find the sum of N natural numbers.\n//DONE BY AMBU SHREE POUDEL (723)\n#include <stdio.h>\n\nint main() {\n    int n, sum;\n\n    // Input the value of n\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\", &n);\n\n    sum = n * (n + 1) / 2;\n\n    printf(\"Sum of first %d natural numbers is: %d\n\", n, sum);\n\n    return 0;\n}",
					"outputImage": "./assets/filehandling_ii/sumof_n_natural_number.png",
					"fileImage": ""
				},
				{
					"title": "What are unary and ternary operators? Explain all the types of operators in brief. (Abiral Kharel)",
					"code": "Unary operators are those operators which require only one operand to execute their respective operations. In C-Programming Language, unary operators include ++, --, and sizeof(). \n\n++ operator:\nThis operator, also known as the increment operator, is used to increase a number or any other numerical value by 1. This operator can be used in two types of ways, pre or post. Pre-increment operator is the usage of this operator in which the operator is put in front of the operand (++a), whereas, post-increment operator is used by putting the operator after the operand(a++). \n\n-- operator:\nSimilar to the increment operator, the decrement operator is used to decrease a numerical value by 1. This operator is also used in two ways, pre and post. The pre usage is the one in which the operator is put in front of the operand(--a) and post-decrement operator is the one in which the operator is put behind the operand for the operation(a--). \n\nIn C, the pre-increment operator (++i) is used when we want to increase the value of a variable before using it in an expression. On the other hand, the post-increment operator (i++) is used when we want to increase the value of a variable after using it in an expression.\n\nTernary operators are those types of operators which require three operands to execute their function. They are also called conditional operators. ‘?:’ is the only ternary operator used in C.\n\n?: operator:\nWhenever a program executes conditionally according to a particular statement, then we use conditional operators. Let us consider an example. Suppose Expression1 is the condition to be evaluated. If the condition(Expression1) is true then it will execute and return the result of Expression2 otherwise if the condition(Expression1) is false then it will execute and return the result of Expression3.\n\nExample:\nCondition ? True : False\nmax = num1 > num2 ? num1 : num2;\n\nBinary operators are those types of operators which require two operands to function/ execute their operations. Binary operators include +, -, *, /, %, &&, || etc. It is the most commonly used type of operator in the C-Language. Its types include Arithmetic Operators(+, -, *, /), Logical Operators(||, &&, !=, ==), Assignment Operators(=, +=, -=), Relational Operators(<, >, <=, >=), etc.",
					"outputImage": "",
					"fileImage": ""
				},
				{
					"title": "What is debugging? What does the && operator do in a program code? (Aarshu shakya)",
					"code": "Debugging is the process of identifying, isolating, and fixing bugs or errors in a program's code. It involves tracking down issues that prevent the program from working as expected, whether those issues are logic errors, syntax errors, or runtime errors. The goal is to ensure the code functions correctly and efficiently. Debugging can be done manually by reviewing the code, or by using debugging tools that help trace execution, inspect variable values, and pinpoint problem areas.\nAs for the && operator, it's a logical AND operator used in many programming languages (such as C, C++, Java, JavaScript, Python, etc.). It evaluates two conditions and returns true only if both conditions are true. If either condition is false, the whole expression returns false. The example of its code is given below.",
					"outputImage": "./assets/filehandling_ii/Example.png",
					"fileImage": ""
				},
				{
					"title": "What are compound statements? What is the advantage of an array over individual variables?",
					"code": "A compound statement in C is defined using braces {} to group multiple statements together. It allows you to execute several statements as a single block, which is particularly useful in control structures like if, for, and while.\n\nExample:\n\nif (condition) {\n    // This is a compound statement\n    statement1();\n    statement2();\n}\n\nAdvantages of Arrays Over Individual Variables in C:\n1. Organization: Arrays allow you to store multiple related values under a single name, making your code cleaner and more manageable.\n2. Index-Based Access: You can access elements using an index, which simplifies the retrieval and manipulation of data.\n\n   int arr[5] = {1, 2, 3, 4, 5};\n   int value = arr[2]; // Accessing the third element\n3. Iteration: Arrays can be easily traversed using loops, allowing for efficient operations on multiple elements.\n\n   for (int i = 0; i < 5; i++) {\n       printf(\"%d \", arr[i]); // Print all elements\n   }\n4. Memory Efficiency: Arrays can lead to more efficient memory usage, especially when dealing with large datasets, as they store data in contiguous memory locations.\n5. Dynamic Allocation: Using pointers, you can create dynamic arrays that can grow or shrink as needed, providing flexibility in data management.\n\n   int *arr = malloc(size * sizeof(int)); // Dynamic array allocation\n6. Performance: Accessing elements of an array is generally faster than accessing multiple individual variables due to better locality of reference in memory.\n\nThese characteristics make arrays a powerful tool in C programming, enabling better data handling and manipulation.",
					"exampleCode": "#include <stdio.h>\n\nint main() {\n    for (int i = 0; i < 5; i++) {\n        printf(\"Iteration %d:\n\", i);\n        // Compound statement\n        {\n            int square = i * i;\n            printf(\"Square of %d is %d\n\", i, square);\n        }\n    }\n    return 0;\n}",
					"outputImage": "./assets/ss066.png",
					"fileImage": "./assets/ss06.png"
				},
				{
					"title": "Write a program using user-defined function to check whether the given year is leap year or not. (Aman Kumar Yadav)",
					"code": "assets/filehandling_ii/Aman-22_C.png",
					"outputImage": "assets/filehandling_ii/Aman-22_Output.png",
					"fileImage": ""
				},
				{
					"title": "Write a program using user-defined function to check whether the given number is Armstrong or not.",
					"code": "#include <stdio.h>\n#include <math.h>\n\nint is_armstrong(int num) {\n    int original_num, remainder, result = 0, n = 0;\n    original_num = num;\n\n     while (original_num != 0) {\n        original_num /= 10;\n        ++n;\n    }\n    original_num = num;\n\n    while (original_num != 0) {\n        remainder = original_num % 10;\n        result += pow(remainder, n);\n        original_num /= 10;\n    }\n    if (result == num) {\n        return 1; // Armstrong number\n    } else {\n        return 0; // Not an Armstrong number\n    }\n}\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    if (is_armstrong(num)) {\n        printf(\"%d is an Armstrong number.\n\", num);\n    } else {\n        printf(\"%d is not an Armstrong number.\n\", num);\n    }\n    return 0;\n}\n",
					"outputImage": "./assets/filehandling_ii/3_output.PNG",
					"fileImage": ""
				},
				{
					"title": "What are the different types of control structures in programming",
					"code": "Sequential Control\n#include <stdio.h>\n\nint main() {\n    // Sequential Execution\n    printf(\"Hello\n\");\n    printf(\"World\n\");\n    return 0;\n}\n\nSelection Control\nIf Statement\n#include <stdio.h>\nint main() {\n    // If Statement\n    int age = 18;\n    if (age >= 18) {\n        printf(\"You are an adult.\n\");\n    }\n    return 0;\n}\n\nIf-Else Statement\n#include <stdio.h>\nint main() {\n    // If-Else Statement\n    int age = 16;\n    if (age >= 18) {\n        printf(\"You are an adult.\n\");\n    } else {\n        printf(\"You are a minor.\n\");\n    }\n    return 0;\n}\n\nRepetition Control (Loops)\nFor Loop\n#include <stdio.h>\nint main() {\n    // For Loop\n    for (int i = 0; i < 5; i++) {\n        printf(\"Iteration %d\n\", i + 1);\n    }\n    return 0;\n}\n\nWhile Loop\n#include <stdio.h>\n\nint main() {\n    // While Loop\n    int count = 0;\n    while (count < 5) {\n        printf(\"Count is %d\n\", count);\n        count++;\n    }\n    return 0;\n}\n\nJump Control\n#include <stdio.h>\nint main() {\n    // Break Statement\n    for (int i = 0; i < 10; i++) {\n        if (i == 5) {\n            break;  // Exit the loop when i is 5\n        }\n        printf(\"%d\n\", i);\n    }\n    return 0;\n}\n\nContinue\n#include <stdio.h>\nint main() {\n    // Continue Statement\n    for (int i = 0; i < 5; i++) {\n        if (i == 2) {\n            continue;  // Skip the rest of the loop when i is 2\n        }\n        printf(\"%d\n\", i);\n    }\n    return 0;\n}",
					"outputImage": "./assets/1.png",
					"fileImage": "./assets/2.png"
				},
				{
					"title": "What is recursion in c? Write a program to find the factorial of a number using recursion.",
					"code": "#include <stdio.h>\nint factorial(int a);\nint main(){\n    int x;\n    printf(\"Enter the value of N: \");\n    scanf(\"%d\",&x);\n    int result = factorial(x);\n    printf(\"%d\",result);\n    return 0;\n}\n\nint factorial(int a){\n    if(a==1 || a==0){\n        return 1;\n    }\n    else{\n        return (a * factorial(a-1));\n    }\n}",
					"outputImage": "./assets/factorial-output.png",
					"fileImage": ""
				},
				{
					"title": "Write a program using user-defined function to find the greatest among 3 numbers. by aayush bhandari 715",
					"code": "#include<stdio.h>\n\nint great(int a, int b, int c);\n\nvoid main()\n{\n    int i, j, k;\n    printf(\"enter three different numbers \n\");\n    scanf(\"%d %d %d\", &i, &j, &k);\n    if(i == j || j == k || i == k)\n    {\n        main();\n    }\n    great(i, j, k);\n}\n\nint great(int a, int b, int c)\n{\n    if (a > b && a > c)\n    {\n        printf(\"%d is the greatest number amongst the three numbers\", a);\n    }\n    if (b > a && b > c)\n    {\n        printf(\"%d is the greatest number amongst the three numbers\", b);\n    }\n    if (c > b && c > a)\n    {\n        printf(\"%d is the greatest number amongst the three numbers\", c);\n    }\n}",
					"outputImage": "./assets/filehandling_ii/question15.PNG",
					"fileImage": ""
				},
				{
					"title": "What is union? Explain the differences between structure and union. (Baibhav Dhital)",
					"code": "Please Find Attachment",
					"outputImage": "./assets/filehandling_ii/bob1_output.PNG",
					"fileImage": ""
				},
				{
					"title": "Write a program using user-defined function to find the smallest among 3 numbers(Abhi Hada, 716)",
					"code": "#include<stdio.h>\n\nint small(int a, int b, int c);\n\nint main(){\n    int a, b, c, s;\n    printf(\"Enter any 3 number::\");\n    scanf(\"%d%d%d\", &a, &b, &c);\n    s = small(a, b, c);\n    printf(\"The smallest number among 3 numbers is %d\n\", s);\n    printf(\"The code was executed by 023neb716\");\n}\n\nint small(int a, int b, int c){\n    if(a < b && a < c){\n        return a;\n    }\n    else if(b < a && b < c){\n        return b;\n    }\n    else if(c < a && c < b){\n        return c;\n    }\n    else{\n        printf(\"Please don't enter equal numbers\");\n    }\n}",
					"ouputImage": "./assets/filehandling_ii/question16.png",
					"fileImage": ""
				},
				{
					"title": "Write a program using user-defined function to find the factorial of a number. (Adarsha Subedi)",
					"code": "#include<stdio.h>\nint fact(int n);\nint main()\n{\n\tint n,result;\n\tprintf(\"Enter a number to find the factorial: \");\n\tscanf(\"%d\",&n);\n\tresult=fact(n);\n\tprintf(\"The factorial of %d is %d.\",n,result);\n\treturn 0;\n}\nint fact(int n){\n\tint i,a=1;\n\tfor(i=1;i<=n;i++){\n\t\ta*=i;\n\t}\n\treturn a;\n}",
					"outputImage": "./assets/filehandling_ii/factorial.PNG",
					"fileImage": ""
				},
				{
					"title": "What are variables and in what way is it different from constants? How do you access the values within an array?",
					"code": "Variables:\nA variable is a named storage location in a computer's memory that can hold a value. The defining characteristic of a variable is that its value can be changed during the execution of a program. In the C programming language, variables must be declared with a specific data type, which dictates the kind of values they can hold. For example, an integer variable can be declared as follows:\n\nint x = 10; // Here, 'x' is a variable that holds the value 10.\n\nConstants:\nIn contrast, a constant is a value that cannot be altered once it has been assigned. Constants are useful for defining fixed values that should remain unchanged throughout the program. In C, constants can be declared using the const keyword. For example:\n\nconst int MAX_VALUE = 100; // 'MAX_VALUE' is a constant that holds the value 100.\n\nDifferences Between Variables and Constants\nMutability:\nVariables can change their values during program execution.\nConstants maintain the same value throughout the program.\n\nDeclaration:\nVariables are declared with their data types and can be re-assigned.\nConstants are declared using the const keyword and cannot be re-assigned.\n\nAccessing Values in an Array\nIn C, an array is a collection of elements of the same data type, stored in contiguous memory locations. To access the elements of an array, you use indices, which start from 0. For example, consider the following array declaration and element access:\n\n#include <stdio.h>\n\nint main() {\n    int myArray[4] = {10, 20, 30, 40}; // Declaration of an array\n\n    // Accessing array elements:\n    printf(\"%d\n\", myArray[0]); // Output: 10 (first element)\n    printf(\"%d\n\", myArray[1]); // Output: 20 (second element)\n    printf(\"%d\n\", myArray[2]); // Output: 30 (third element)\n    printf(\"%d\n\", myArray[3]); // Output: 40 (fourth element)\n\n    return 0;\n}\n\nConclusion\nIn summary, variables are mutable storage locations that can change over time, while constants are immutable values that remain constant. Arrays in C allow for the storage and access of multiple values using indices, enabling efficient data management and retrieval.",
					"outputImage": "",
					"fileImage": ""
				},
				{
					"title": "Write a program using user-defined function to check whether the given number is odd or even.",
					"code": "#include <stdio.h>\n\nvoid checkEvenOdd(int number) {\n    if (number % 2 == 0) {\n        printf(\"The number %d is Even.\n\", number);\n    } else {\n        printf(\"The number %d is Odd.\n\", number);\n    }\n}\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    checkEvenOdd(num);\n    return 0;\n}",
					"outputImage": ".assets/filehandling_ii/aavash outptut.png",
					"fileImage": ""
				},
				{
					"title": "Write a C program to remove a file.(Dibyam Acharya)",
					"code": "#include <stdio.h>\nint main() {\n    FILE * fp;\n    fp=fopen(\"Shrek.txt\",\"w\");\n    if(fp==NULL)\n    {\n        printf(\"Error in opening file\n\");\n    }\n    else\n    {\n        fclose(fp);\n        remove(\"Shrek.txt\");\n        printf(\"The file was successfully removed\");\n    }\n    return 0;\n}",
					"outputImage": "./assets/48_Output.png",
					"fileImage": "./assets/48_File.png"
				},
				{
					"title": "Program to find whether the number is prime or composite",
					"code": "#include <stdio.h>\n\nconst char* check_prime_or_composite(int number) {\n    if (number <= 1) {\n        return \"Neither prime nor composite\";\n    }\n    for (int i = 2; i * i <= number; i++) {\n        if (number % i == 0) {\n            return \"Composite\";\n        }\n    }\n    return \"Prime\";\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    printf(\"The number %d is %s.\n\", number, check_prime_or_composite(number));\n    return 0;\n}",
					"outputImage": "./assets/hari.png",
					"fileImage": ""
				},
				{
					"title": "What is user-defined function? Explain all the types of user-defined functions in brief with a suitable program of each. - Aadarsh Thakur, 701",
					"code": "#include<stdio.h>\n\n// A user-defined function is a function that is defined by the programmer to perform a specific task.\n// It allows breaking down a complex problem into smaller, manageable pieces of code.\n\n// 1. Function without arguments and without return value\n// This type of function does not take any input parameters and does not return any value.\n// It simply performs a task, such as displaying a message or performing an operation.\nvoid displayMessage() {\n    printf(\"Hello, this is question no 1.\n\");\n}\n\n// 2. Function with arguments but without return value\n// This type of function takes input parameters, performs an operation using those parameters,\n// but does not return a value. It might, for example, display a result or perform some action.\nvoid addNumbers(int a, int b) {\n    printf(\"Sum: %d\n\", a + b);\n}\n\n// 3. Function without arguments but with return value\n// This type of function does not take any parameters but returns a value to the calling function.\n// For example, it could perform a calculation and return the result.\nint getNumber() {\n    return 10;  // Returns a constant value.\n}\n\n// 4. Function with arguments and with return value\n// This function takes input parameters, performs an operation using those parameters, \n// and returns a value. It combines both input and output functionality.\nint multiplyNumbers(int a, int b) {\n    return a * b;  // Returns the result of multiplying two numbers.\n}\n\nint main() {\n    // Function without arguments and without return value\n    displayMessage();  // Calls the displayMessage function to print a message\n\n    // Function with arguments but without return value\n    addNumbers(5, 3);  // Passes 5 and 3 as arguments to the addNumbers function\n\n    // Function without arguments but with return value\n    printf(\"Returned number: %d\n\", getNumber());  // Calls getNumber() and prints the returned value\n\n    // Function with arguments and with return value\n    printf(\"Multiplication result: %d\n\", multiplyNumbers(4, 2));  // Passes 4 and 2 to multiplyNumbers and prints the result\n\n    return 0;\n}\n\n/* \nExplanation of Types of User-Defined Functions:\n1. Function without arguments and without return value:\n   - Takes no input and does not return any value.\n   - Example: displayMessage().\n\n2. Function with arguments but without return value:\n   - Takes input parameters but does not return any result.\n   - Example: addNumbers(int a, int b).\n\n3. Function without arguments but with return value:\n   - Takes no input but returns a value.\n   - Example: getNumber().\n\n4. Function with arguments and with return value:\n   - Takes input parameters and returns a value.\n   - Example: multiplyNumbers(int a, int b).\n*/",
					"outputImage": "./assets/filehandling_ii/qno1.png",
					"fileImage": ""
				},
				{
					"title": " 55.Explain all the types of string handling functions in brief.-by Prajwol Chapagaee",
					"code": "String handling functions are essential for working with strings in programming as they encompass broad types of operations to manipulate, search, and modify string data. On the basis of the type of operation, string handling functions have been categorized as follows:\n\n1. Length Functions: These provide the measure of the size of a string. The number of characters, excluding the null terminator, is determined by `strlen()`, while `sizeof()` gives the total size of a string, counting the null terminator, in the language, such as C.\n\n2. Character Search Functions: These are functions that search a string for a character. The functions `strchr()` find the first occurrence of a character, `strrchr()` finds the last occurrence, and `strstr()` searches a string for another substring.\n\n3. String Manipulation Functions: Functions that perform operations on strings. For example, `strcat()`, which is used to concatenate two strings, and `strncat()`, used to append a given number of characters from one string to another.\n\n4. String Comparison Functions: These compare two strings. For instance, the `strcmp()` function compares two strings in dictionary order (in alphabetical order), while `strncmp()` compares a specified number of characters of both strings.\n\n5. String Copy Functions: In order to copy one string into another, one needs the help of these functions. For example, `strcpy()` copies an entire string, since `strncpy()` copies just a specific number of characters from one string to the other, which also helps in circumventing buffer overflow.\n\nThese string handling functions are critical for string searching, modification, and comparison, enabling the effective manipulation of strings in programming.",
					"outputImage": "",
					"fileImage": ""
				},
				{
					"title": "29. Write a program to generate Fibonacci series using recursion. Answered by Anwesh Shrestha 729",
					"code": "#include<stdio.h>\nint recursivefibonacci(int);\n\nvoid main(){\n    int n, x;\n    printf(\"Please enter the total number of values you want in the Fibonacci series : \n\");\n    scanf(\"%d\", &n);\n    printf(\"The Fibonacci series of these numbers would be equal to : \n\");\n\n    for(x = 0; x < n; x++) {\n        printf(\"%d \", recursivefibonacci(x)); // This will print the fibonacci series upto nth term\n    }\n}\n\nint recursivefibonacci(int x){\n    if(x == 0) return 0;\n    else if(x == 1) return 1;\n    else return (recursivefibonacci(x - 1) + recursivefibonacci(x - 2));\n}\n",
					"outputImage": "./assets/filehandling_ii/fibo_output.png",
					"fileImage": "./assets/filehandling_ii/fibo_output.png"
				},
				{
					"title": "Write a program using user-defined function to check whether the given number is palindrome or not. aashraya pokharel",
					"code": "#include <stdio.h>\n\nint isPalindrome(int num) {\n    int originalNum, reversedNum = 0, remainder;\n    originalNum = num;\n    while (num != 0) {\n        remainder = num % 10;\n        reversedNum = reversedNum * 10 + remainder;\n        num /= 10;\n    }\n    if (originalNum == reversedNum) {\n        return 1; \n    } else {\n        return 0; \n    }\n}\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (isPalindrome(number)) {\n        printf(\"%d is a palindrome.\n\", number);\n    } else {\n        printf(\"%d is not a palindrome.\n\", number);\n    }\n    return 0;\n}",
					"outputImage": "./assets/cprogramming/palindrome.png",
					"fileImage": ""
				},
				{
					"title": "Write a program using structure to accept details of 5 employees, count how many have salary between 25000-30000, and display records. (Bikrant Lekhak)",
					"code": "#include <stdio.h>\n\n#define MAX_EMPLOYEES 5\n\n// Structure to store employee details\nstruct Employee {\n    int id;\n    char name[50];\n    int age;\n    char address[100];\n    float salary;\n};\n\nint main() {\n    struct Employee employees[MAX_EMPLOYEES];\n    int count = 0;\n\n    // Accepting details of 5 employees\n    printf(\"Enter details of %d employees:\n\", MAX_EMPLOYEES);\n    for (int i = 0; i < MAX_EMPLOYEES; i++) {\n        printf(\"\nEmployee %d:\n\", i + 1);\n        printf(\"ID: \");\n        scanf(\"%d\", &employees[i].id);\n        printf(\"Name: \");\n        scanf(\" %[^\n]\", employees[i].name);  // Accept full name with spaces\n        printf(\"Age: \");\n        scanf(\"%d\", &employees[i].age);\n        printf(\"Address: \");\n        scanf(\" %[^\n]\", employees[i].address);\n        printf(\"Salary: \");\n        scanf(\"%f\", &employees[i].salary);\n\n        // Count employees with salary between 25000 and 30000\n        if (employees[i].salary >= 25000 && employees[i].salary <= 30000) {\n            count++;\n        }\n    }\n\n    // Displaying details of all employees\n    printf(\"\nEmployee Records:\n\");\n    printf(\"-----------------------------------------------------------\n\");\n    printf(\"ID\tName\t\tAge\tAddress\t\tSalary\n\");\n    printf(\"-----------------------------------------------------------\n\");\n    for (int i = 0; i < MAX_EMPLOYEES; i++) {\n        printf(\"%d\t%s\t%d\t%s\t%.2f\n\",\n               employees[i].id, employees[i].name, employees[i].age,\n               employees[i].address, employees[i].salary);\n    }\n\n    // Display count of employees in salary range 25000-30000\n    printf(\"\nTotal employees with salary between 25000 and 30000: %d\n\", count);\n\n    // Signature line\n    printf(\"\nDone by Bikrant Lekhak\n\");\n\n    return 0;\n}",
					"outputImage": "./assets/filehandling_ii/question_no_37_by_bikrantlekhak.png"
				},
				{
					"title": "What is dereferencing operator? Write a program to swap two numbers using pointer. (Binayak)",
					"code": "The dereferencing operator is * in C/C++. It is used to access the value at the address the pointer is pointing to. When you dereference a pointer, you get the value stored at the memory address that the pointer holds.\n\nTo swap two numbers using pointers, you'll need to:\n\n1. Declare two integer variables.\n2. Use pointers to hold their addresses.\n3. Dereference the pointers to access and swap the values.\n#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;  // Dereference the pointer to get the value\n    *a = *b;        // Dereference and assign the value of b to a\n    *b = temp;      // Assign the temp value to b\n}\n\nint main() {\n    int x, y;\n\n    // Input the values\n    printf(\"Enter two numbers: \");\n    scanf(\"%d %d\", &x, &y);\n\n    // Swap using pointers\n    swap(&x, &y);\n\n    // Output the swapped values\n    printf(\"After swapping: x = %d, y = %d\n\", x, y);\n\n    return 0;\n}",
					"outpuImage": "",
					"fileImage": ""
				},
				{
					"title": "What are the alphabets or character set of C programming language? What are C-Tokens? List and define different C-Tokens with examples. Aaryan Shah 709",
					"code": "See the attached photo",
					"outputImage": "./assets/filehandling_ii/question_no_9_by_aaryan_shah.png",
					"fileImage": "./assets/filehandling_ii/question_no_9_by_aaryan_shah.png"
				},
				{
					"title": "Explain Virtual Reality and its types with its advantages and disadvantages. Abiral Kharel(755)",
					"code": "See the attached photo",
					"outputImage": "./assets/VR1.png",
					"fileImage": "./assets/filehandling_ii/VR1.png"
				},
				{
					"title": "30. Write down the differences between call by value and call by reference.-Aryan Thapaliya",
					"code": "This question doesnot require code to be written. View the output!",
					"outputImage": "./assets/filehandling_ii/answer.PNG",
					"fileImage": "./assets/filehandling_ii/answer.PNG"
				},
				{
					"title": "Write a C program to sort the elements of an array in descending order. (Binam Adhikari)",
					"code": "#include <stdio.h>\n\nvoid sortDescending(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] < arr[j]) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {64, 34, 25, 12, 22, 11, 90};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    sortDescending(arr, n);\n\n    printf(\"Sorted array in descending order: \n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\n\");\n\n    return 0;\n}",
					"outputImage": "./assets/53.png",
					"fileImage": ""
				},
				{
					"title": "Write a C program to append content to an existing file. Dikshyanta Karki (749)",
					"code": "#include <stdio.h>\n\nint main() {\n    FILE *file;\n    char content[] = \"This is the appended content.\";\n    file = fopen(\"existing.txt\", \"a\");\n    if (file == NULL) {\n        printf(\"Error opening file for appending.\");\n        return 1;\n    }\n    fprintf(file, \"%s\", content);\n    fclose(file);\n    return 0;\n}",
					"outputImage": "./assets/filehandling_ii/49_output.png",
					"fileImage": "./assets/filehandling_ii/49_output2.png"
				},
				{
					"title": "Write a C program to calculate the sum of n natural numbers. Ambu shree",
					"code": "//Write a program using user-defined function to find the sum of N natural numbers.\n//DONE BY AMBU SHREE POUDEL (723)\n#include <stdio.h>\n\nint main() {\n    int n, sum;\n\n    // Input the value of n\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\", &n);\n\n    sum = n * (n + 1) / 2;\n\n    printf(\"Sum of first %d natural numbers is: %d\n\", n, sum);\n\n    return 0;\n}",
					"outputImage": "./assets/filehandling_ii/sumof_n_natural_number.png",
					"fileImage": ""
				},
				{
					"title": "What are unary and ternary operators? Explain all the types of operators in brief. (Abiral Kharel)",
					"code": "Unary operators are those operators which require only one operand to execute their respective operations. In C-Programming Language, unary operators include ++, --, and sizeof(). \n\n++ operator:\nThis operator, also known as the increment operator, is used to increase a number or any other numerical value by 1. This operator can be used in two types of ways, pre or post. Pre-increment operator is the usage of this operator in which the operator is put in front of the operand (++a), whereas, post-increment operator is used by putting the operator after the operand(a++). \n\n-- operator:\nSimilar to the increment operator, the decrement operator is used to decrease a numerical value by 1. This operator is also used in two ways, pre and post. The pre usage is the one in which the operator is put in front of the operand(--a) and post-decrement operator is the one in which the operator is put behind the operand for the operation(a--). \n\nIn C, the pre-increment operator (++i) is used when we want to increase the value of a variable before using it in an expression. On the other hand, the post-increment operator (i++) is used when we want to increase the value of a variable after using it in an expression.\n\nTernary operators are those types of operators which require three operands to execute their function. They are also called conditional operators. ‘?:’ is the only ternary operator used in C.\n\n?: operator:\nWhenever a program executes conditionally according to a particular statement, then we use conditional operators. Let us consider an example. Suppose Expression1 is the condition to be evaluated. If the condition(Expression1) is true then it will execute and return the result of Expression2 otherwise if the condition(Expression1) is false then it will execute and return the result of Expression3.\n\nExample:\nCondition ? True : False\nmax = num1 > num2 ? num1 : num2;\n\nBinary operators are those types of operators which require two operands to function/ execute their operations. Binary operators include +, -, *, /, %, &&, || etc. It is the most commonly used type of operator in the C-Language. Its types include Arithmetic Operators(+, -, *, /), Logical Operators(||, &&, !=, ==), Assignment Operators(=, +=, -=), Relational Operators(<, >, <=, >=), etc.",
					"outputImage": "",
					"fileImage": ""
				},
				{
					"title": "What is debugging? What does the && operator do in a program code? (Aarshu shakya)",
					"code": "Debugging is the process of identifying, isolating, and fixing bugs or errors in a program's code. It involves tracking down issues that prevent the program from working as expected, whether those issues are logic errors, syntax errors, or runtime errors. The goal is to ensure the code functions correctly and efficiently. Debugging can be done manually by reviewing the code, or by using debugging tools that help trace execution, inspect variable values, and pinpoint problem areas.\nAs for the && operator, it's a logical AND operator used in many programming languages (such as C, C++, Java, JavaScript, Python, etc.). It evaluates two conditions and returns true only if both conditions are true. If either condition is false, the whole expression returns false. The exampe of its code is given below.",
					"outputImage": "./assets/Example.png"
				},
				{
					"title": "What is the purpose of printf() and scanf() in C Program? What is \\0 character? (Aarshu Shakya)",
					"code": "In C programming, printf() and scanf() are used for taking standard input and output functions. These functions are declared in the <stdio.h> library. The printf() function is used to display output on the screen. The function allows formatted output using format specifiers such as %d for integers, %f for floating-point numbers, and %s for strings. For example, printf(\"Age: %d\", age); prints the value of age as an integer and printf(\"Salary: %f\", salary) prints the value of float.\nOn the other hand, scanf() is used to take user input from the keyboard, storing the entered value in a variable. It requires the address-of (&) operator to correctly store input in variables, such as scanf(\"%d\", &num);, which reads an integer input from the user.\nAdditionally, the null character (\\0) plays a crucial role in C strings, marking the end of a string. In C, strings are stored as character arrays and always end with \\0 to indicate their termination. For example, the string \"Hello\" is stored internally as {'H', 'e', 'l', 'l', 'o', '\\0'}. The null character ensures functions like printf(\"%s\", str); correctly print the string by stopping at \\0. Without it, functions may read beyond the intended string, leading to unexpected behavior. These fundamental concepts are essential for handling input, output, and strings in C programming.",
					"outputImage": "./assets/filehandling_ii/purpose_code.png"
				},
				{
					"title": "Write a program to read and write from a file using getw() and putw() function. Pratik GC(744)",
					"code": "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n    FILE *fp;\n    int a;\n    fp=fopen(\"D:/doingright.txt\",\"w\");\n    printf(\"enter the number to input in the file\");\n    scanf(\"%d\",&a);\n    putw(a,fp);\n    fclose(fp);\n    fp=fopen(\"D:/doingright.txt\",\"r\");\n    int n=getw(fp);\n    printf(\"The integer read from file is %d\",n);\n    fclose(fp);\n}",
					"outpuImage": "/assets/image7.png",
					"fileImage": ""
				}
			]
		},
		{
			"name": "Web Technology",
			"snippets": [
				{
					"title": "Write a JS program to find the largest number among three numbers. (Pratik GC)",
					"code": "<script>\nfunction findLargest(a, b, c) {\n    if (a >= b && a >= c) {\n        console.log(a + \" is the largest number.\");\n    } else if (b >= a && b >= c) {\n        console.log(b + \" is the largest number.\");\n    } else {\n        console.log(c + \" is the largest number.\");\n    }\n}\n\n// Example usage\nfindLargest(10, 25, 15);\n</script>\n\n<pre id=\"codeBlock\"></pre>",
					"outputImage": "./assets/web.png",
					"fileImage": ""
				},
				{
					"title": "Explain the datatypes in javascript. What is an undefined value in javascript? (Ambu shree)",
					"code": "First part of the question:\nJavaScript is a dynamically typed language, meaning variables can hold values of any type without specifying the type explicitly. The data types in JavaScript are categorized into two main groups:\n\nPrimitive Data Types:\n\nString: Represents textual data. Example: \"Hello, World!\"\n\nNumber: Represents both integer and floating-point numbers. Example: 42, 3.14\n\nBoolean: Represents a logical entity with two values: true or false.\n\nUndefined: Represents a variable that has been declared but not assigned a value.\n\nNull: Represents the intentional absence of any object value. Example: null\n\nBigInt: Represents integers larger than the range supported by the Number type. Example: 9007199254740991n\n\nSymbol: Represents a unique and immutable value, often used as object property keys. Example: Symbol('description')\n\nNon-Primitive (Reference) Data Types:\n\nObject: Represents a collection of key-value pairs. Example: { name: \"Alice\", age: 25 }\n\nArray: Represents an ordered list of values. Example: [1, 2, 3]\n\nFunction: Represents a reusable block of code. Example: function add(a, b) { return a + b; }\n\nSECOND PART:\nIn JavaScript, undefined is a primitive value that represents a variable that has been declared but has not been assigned a value. It is also the default return value of functions that do not explicitly return anything.\n\nExamples of undefined:\nUninitialized Variable:\n\n```javascript\nlet x;\nconsole.log(x);\n```",
					"outputImage": "",
					"fileImage": ""
				},
				{
					"title": "Write a program using javascript to check whether the given number is palindrome or not. (729, Anwesh S.)",
					"code": "let a = parseInt(prompt(\"Enter a number:\")), sum = 0, b, z = a;\n\nwhile (a > 0) {\n  b = a % 10;\n  sum = sum * 10 + b;\n  a = parseInt(a / 10);\n}\n\nconsole.log(\"Reversed Number:\", sum);\n\nif (z === sum) { // you could do == but === confirms if data type is same too. So yeah it's kinda better, but better do == in exam as some examiners might confuse it with a mistake. \n  console.log(\"Palindrome Number:\", sum);\n} else {\n  console.log(\"Not a Palindrome Number:\", sum);\n}",
					"outputImage": "assets/Web-technology/Palindrome.png",
					"fileImage": ""
				},
				{
					"title": "What is the use of var_dump function? Abiral Kharel- 755",
					"code": "",
					"outputImage": "./assets/WebTech41-1.png",
					"fileImage": "./assets/WebTech41-2.png"
				},
				{
					"title": "What is === operator? What are all the looping structures in JavaScript? What would be the result of 3+2+”7″?(Dibyam Acharya)",
					"code": "See the attached photo",
					"outputImage": "./assets/Output0216_48.PNG",
					"fileImage": ""
				},
				{
					"title": "What are javascript events? List some of the javascript events and write a complete Html code with javascript to illustrate javascript events.",
					"code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>JavaScript Events Example</title>\n    <style>\n        #message {\n            font-size: 20px;\n            margin: 20px;\n            color: #2c3e50;\n        }\n        #box {\n            width: 200px;\n            height: 200px;\n            background-color: lightblue;\n            margin: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h2>JavaScript Events Example</h2>\n\n    <button id=\"clickButton\">Click Me!</button>\n    <div id=\"box\"></div>\n\n    <input type=\"text\" id=\"focusInput\" placeholder=\"Focus on me!\" />\n    <form id=\"myForm\">\n        <input type=\"text\" id=\"name\" placeholder=\"Enter your name\" />\n        <button type=\"submit\">Submit</button>\n    </form>\n\n    <div id=\"message\"></div>\n\n    <script>\n        // Click event\n        document.getElementById('clickButton').addEventListener('click', function() {\n            alert('Button was clicked!');\n        });\n\n        // Mouseover event\n        document.getElementById('box').addEventListener('mouseover', function() {\n            document.getElementById('message').innerText = 'You are hovering over the box!';\n        });\n\n        // Mouseout event\n        document.getElementById('box').addEventListener('mouseout', function() {\n            document.getElementById('message').innerText = ''; \n        });\n\n        // Focus event\n        document.getElementById('focusInput').addEventListener('focus', function() {\n            document.getElementById('message').innerText = 'Input field is focused!';\n        });\n\n        // Blur event\n        document.getElementById('focusInput').addEventListener('blur', function() {\n            document.getElementById('message').innerText = 'Input field lost focus!';\n        });\n\n        // Submit event\n        document.getElementById('myForm').addEventListener('submit', function(event) {\n            event.preventDefault(); // Prevent form submission for demo\n            const name = document.getElementById('name').value;\n            document.getElementById('message').innerText = 'Form submitted! Hello, ' + name + '!';\n        });\n    </script>\n</body>\n</html>",
					"outputImage": "assets/filehandling_ii/8_web.png",
					"fileImage": "assets/filehandling_ii/8_web_output.png"
				},
				{
					"title": "Write a program using javascript to check whether the given number is Armstrong or not.",
					"code": "let a = parseInt(prompt(\"Enter a number::\"));\nlet s = 0;\nlet temp = a;\n\nwhile (a != 0) {\n    let r = a % 10;\n    s = s + r * r * r;\n    a = Math.floor(a / 10);  // Use Math.floor to avoid floating point\n}\n\nif (temp === s) { \n    alert(\"The number is Armstrong\");\n} else {\n    alert(\"The number is not Armstrong\");\n}",
					"outputImage": "assests/filehandling_ii/16output.png",
					"fileImage": ""
				}
			]
		},
		{
			"name": "Data Communication and Networking",
			"snippets": [
				{
					"title": "Describe the bus and star topology with suitable diagram.",
					"code": "",
					"outputImage": "./assets/Starbus1.png",
					"fileImage": "./assets/StarBus2.png"
				}
			]
		}
	]
}
